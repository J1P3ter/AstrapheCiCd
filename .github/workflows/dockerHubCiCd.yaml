name: Astraphe CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [common, eureka-server, gateway, user-server]

    steps:
      - name: Checkout
        #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew and build with it
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test
        working-directory: ${{ matrix.service }}

  docker:
    name: Build Docker image and push to Docker Hub
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Docker 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t dmitry5156/astraphe:latest .

      # Docker Hub에 이미지 푸시
      - name: Push Docker image to Docker Hub
        run: docker push dmitry5156/astraphe:latest

  deploy:
    name: deploy
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Copy docker-compose.yaml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yaml"
          target: "/home/ubuntu"

      - name: Deploy to EC2
        # connect to EC2 instance using SSH and restart container
        uses: appleboy/ssh-action@v1.0.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: 22
          envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION
          script: |
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker compose down
            docker compose pull
            docker compose up -d